# ui/app.py ‚Äì Giao di·ªán nhi·ªÅu trang (Trang ch·ªçn m√¥ h√¨nh + Trang thao t√°c)
import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import sys
import os
import numpy as np
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

from module import apriori_custom
from module.naive_bayes_custom import NaiveBayesClassifier
from module.rough_set_custom import RoughSet
from module.k_means import KMeansClusterer
from module.decision_tree import DecisionTree
from module.kohonen import KohonenSOM

st.set_page_config(page_title="Khai ph√° d·ªØ li·ªáu", layout="wide")

# --- Kh·ªüi t·∫°o session state ---
if 'page' not in st.session_state:
    st.session_state.page = 'home'

# --- Trang ch·ªçn m√¥ h√¨nh ---
def show_home():
    st.markdown("<h1 style='text-align: center;'>üìö Ch·ªçn m√¥ h√¨nh khai ph√° d·ªØ li·ªáu</h1>", unsafe_allow_html=True)

    st.markdown("<br>", unsafe_allow_html=True)
    col1, col2, col3, col4, col5, col6 = st.columns(6)

    with col1:
        if st.button("üìä Apriori (Lu·∫≠t k·∫øt h·ª£p)", use_container_width=True):
            st.session_state.page = 'apriori'

    with col2:
        if st.button("üß† Naive Bayes (Ph√¢n l·ªõp)", use_container_width=True):
            st.session_state.page = 'bayes'
    
    with col3:
        if st.button("üìò T·∫≠p th√¥ (Rough Set)", use_container_width=True):
            st.session_state.page = 'rough'

    with col4:
        if st.button("üìö K-Means (Ph√¢n c·ª•m)", use_container_width=True):
            st.session_state.page = 'kmeans'
    with col5:
        if st.button("üå≥ C√¢y quy·∫øt ƒë·ªãnh", use_container_width=True):
            st.session_state.page = 'decision_tree'
    with col6:
        if st.button("üó∫Ô∏è Kohonen SOM (Ph√¢n c·ª•m)", use_container_width=True):
            st.session_state.page = 'kohonen'

# --- Trang Apriori ---
def show_apriori():
    st.button("‚¨ÖÔ∏è Quay l·∫°i menu", on_click=lambda: st.session_state.update(page='home'))
    st.header("üìä Lu·∫≠t k·∫øt h·ª£p - Apriori ho·∫∑c Kh√¥ng tƒÉng c∆∞·ªùng")
    uploaded_file = st.file_uploader("üìÇ T·∫£i file CSV", type=["csv"], key="apriori_upload")

    if uploaded_file:
        df = pd.read_csv(uploaded_file)
        st.dataframe(df)
        event_col = st.selectbox("üîπ C·ªôt giao d·ªãch:", df.columns)
        item_col = st.selectbox("üî∏ C·ªôt m·∫∑t h√†ng:", df.columns)

        st.radio("‚öôÔ∏è Ch·ªçn thu·∫≠t to√°n:", options=["Apriori", "Kh√¥ng tƒÉng c∆∞·ªùng"], key="algo")

        min_sup = st.number_input("üìè Min Support (0‚Äì1):", min_value=0.0, max_value=1.0, value=0.4, step=0.01)
        min_conf = st.number_input("üìê Min Confidence (0‚Äì1):", min_value=0.0, max_value=1.0, value=0.6, step=0.01)

        if st.button("üöÄ Ch·∫°y lu·∫≠t k·∫øt h·ª£p"):
            df_temp = df[[event_col, item_col]].dropna()
            df_temp.columns = ['Invoice', 'Item']
            transactions = apriori_custom.create_transactions(df_temp)

            freq_items = apriori_custom.find_frequent_itemsets(transactions, min_sup)
            rules = apriori_custom.generate_rules(freq_items, transactions, min_conf)

            st.subheader("‚úÖ T·∫≠p ph·ªï bi·∫øn:")
            if not freq_items.empty:
                freq_items['itemsets'] = freq_items['itemsets'].apply(lambda x: ', '.join(sorted(list(x))))
                st.dataframe(freq_items)
                csv_freq = freq_items.to_csv(index=False).encode('utf-8')
                st.download_button("üì• T·∫£i t·∫≠p ph·ªï bi·∫øn", csv_freq, file_name="frequent_itemsets.csv", mime="text/csv")

                # üìä Bi·ªÉu ƒë·ªì bar Support
                st.subheader("üìä Bi·ªÉu ƒë·ªì Support:")
                fig, ax = plt.subplots()
                top_freq = freq_items.sort_values('support', ascending=False).head(15)
                ax.barh(top_freq['itemsets'], top_freq['support'])
                ax.set_xlabel('Support')
                ax.invert_yaxis()
                st.pyplot(fig)
            else:
                st.warning("‚ö†Ô∏è Kh√¥ng c√≥ t·∫≠p ph·ªï bi·∫øn n√†o.")

            st.subheader("üìê Lu·∫≠t k·∫øt h·ª£p:")
            if not rules.empty:
                rules['antecedents'] = rules['antecedents'].apply(lambda x: ', '.join(sorted(list(x))))
                rules['consequents'] = rules['consequents'].apply(lambda x: ', '.join(sorted(list(x))))
                st.dataframe(rules[['antecedents', 'consequents', 'support', 'confidence']])

                csv_rules = rules.to_csv(index=False).encode('utf-8')
                st.download_button("üì• T·∫£i lu·∫≠t k·∫øt h·ª£p", csv_rules, file_name="association_rules.csv", mime="text/csv")

                # üìà Bi·ªÉu ƒë·ªì scatter Support vs Confidence
                st.subheader("üìà Bi·ªÉu ƒë·ªì Support vs Confidence:")
                fig2, ax2 = plt.subplots()
                ax2.scatter(rules['support'], rules['confidence'], alpha=0.6)
                ax2.set_xlabel('Support')
                ax2.set_ylabel('Confidence')
                ax2.set_title('Scatter plot: Support vs Confidence')
                st.pyplot(fig2)
            else:
                st.warning("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y lu·∫≠t n√†o.")

# --- Trang Naive Bayes ---
def show_bayes():
    st.button("‚¨ÖÔ∏è Quay l·∫°i menu", on_click=lambda: st.session_state.update(page='home'))
    st.header("üß† Naive Bayes - Ph√¢n l·ªõp")
    uploaded_file = st.file_uploader("üìÇ T·∫£i file CSV", type=["csv"], key="bayes_upload")

    if uploaded_file:
        df = pd.read_csv(uploaded_file)
        st.dataframe(df)
        target_col = st.selectbox("üéØ C·ªôt m·ª•c ti√™u:", df.columns)
        input_values = {}
        feature_cols = [col for col in df.columns if col != target_col]

        for col in feature_cols:
            input_values[col] = st.selectbox(f"üîπ {col}", df[col].unique())

        if st.button("üöÄ D·ª± ƒëo√°n"):
            clf = NaiveBayesClassifier()
            clf.fit(df, target_col)
            predicted_class, log_scores = clf.predict(input_values)

            st.success(f"‚úÖ D·ª± ƒëo√°n: `{predicted_class}`")
            st.json({k: round(v, 4) for k, v in log_scores.items()})

# ---Trang Rough Set---

def show_rough_set():
    st.button("‚¨ÖÔ∏è Quay l·∫°i menu", on_click=lambda: st.session_state.update(page='home'))
    st.header("üìò T·∫≠p th√¥ ‚Äì Rough Set")

    uploaded_file = st.file_uploader("üìÇ T·∫£i file CSV", type=["csv"], key="rough_upload")
    if uploaded_file:
        df = pd.read_csv(uploaded_file)
        st.dataframe(df)

        decision_col = st.selectbox("üéØ Ch·ªçn c·ªôt quy·∫øt ƒë·ªãnh (Decision Attribute):", df.columns)
        condition_cols = st.multiselect("üîπ Ch·ªçn c√°c c·ªôt ƒëi·ªÅu ki·ªán (Condition Attributes):", [col for col in df.columns if col != decision_col])
        func = st.radio("‚öôÔ∏è Ch·ªçn ch·ª©c nƒÉng:", ["X·∫•p x·ªâ (Lower/Upper)", "Ph·ª• thu·ªôc thu·ªôc t√≠nh", "T√¨m reduct", "Sinh lu·∫≠t ch√≠nh x√°c 100%"])

        if st.button("üöÄ Th·ª±c hi·ªán"):
            rs = RoughSet(df, condition_cols, decision_col)

            if func == "X·∫•p x·ªâ (Lower/Upper)":
                val = st.selectbox("üß™ Ch·ªçn gi√° tr·ªã quy·∫øt ƒë·ªãnh:", df[decision_col].unique())
                lower = rs.lower_approx(val)
                upper = rs.upper_approx(val)

                st.write(f"üì• Lower approximation c·ªßa `{val}` ({len(lower)} d√≤ng):", sorted(lower))
                st.write(f"üì§ Upper approximation c·ªßa `{val}` ({len(upper)} d√≤ng):", sorted(upper))

            elif func == "Ph·ª• thu·ªôc thu·ªôc t√≠nh":
                degree = rs.dependency_degree()
                st.success(f"üìä M·ª©c ƒë·ªô ph·ª• thu·ªôc: `{round(degree, 4)}`")

            elif func == "T√¨m reduct":
                reduct = rs.find_reduct()
                st.success(f"üîç Reduct t√¨m ƒë∆∞·ª£c: `{', '.join(reduct)}`")

            elif func == "Sinh lu·∫≠t ch√≠nh x√°c 100%":
                rules = rs.generate_rules()
                if rules:
                    st.subheader(f"üìú {len(rules)} lu·∫≠t ch√≠nh x√°c 100%:")
                    for i, r in enumerate(rules, 1):
                        cond = ' ‚àß '.join([f"{k}={v}" for k, v in r['conditions'].items()])
                        st.write(f"**Lu·∫≠t {i}:** N·∫øu {cond} ‚Üí {decision_col} = {r['decision']}")
                    # Cho ph√©p t·∫£i
                    rule_df = pd.DataFrame([{
                        **r['conditions'], '=>': f"{decision_col}={r['decision']}"
                    } for r in rules])
                    csv = rule_df.to_csv(index=False).encode('utf-8')
                    st.download_button("üì• T·∫£i c√°c lu·∫≠t v·ªÅ CSV", csv, file_name="rough_rules.csv", mime='text/csv')
                else:
                    st.warning("‚ö†Ô∏è Kh√¥ng sinh ƒë∆∞·ª£c lu·∫≠t n√†o.")

# ---Trang K-mean---
def show_kmeans():
    st.button("‚¨ÖÔ∏è Quay l·∫°i menu", on_click=lambda: st.session_state.update(page='home'))
    st.header("üìö K-Means - Ph√¢n c·ª•m")
    
    st.markdown("**H∆∞·ªõng d·∫´n**: T·∫£i file CSV ch·ª©a c√°c c·ªôt s·ªë ƒë·ªÉ th·ª±c hi·ªán ph√¢n c·ª•m. ƒê·∫£m b·∫£o d·ªØ li·ªáu kh√¥ng ch·ª©a gi√° tr·ªã thi·∫øu.")

    uploaded_file = st.file_uploader("üìÇ T·∫£i file CSV", type=["csv"], key="kmeans_upload")

    if uploaded_file:
        df = pd.read_csv(uploaded_file)
        
        if df.isna().any().any():
            st.error("‚ö†Ô∏è D·ªØ li·ªáu ch·ª©a gi√° tr·ªã thi·∫øu. Vui l√≤ng l√†m s·∫°ch d·ªØ li·ªáu tr∆∞·ªõc khi ch·∫°y K-Means.")
            return
        
        numeric_cols = df.select_dtypes(include=['float64', 'int64']).columns
        if len(numeric_cols) < 2:
            st.error("‚ö†Ô∏è D·ªØ li·ªáu ph·∫£i c√≥ √≠t nh·∫•t 2 c·ªôt s·ªë ƒë·ªÉ th·ª±c hi·ªán ph√¢n c·ª•m.")
            return
        
        # ƒê·ªãnh d·∫°ng hi·ªÉn th·ªã: ch·ªâ gi·ªØ 2 ch·ªØ s·ªë th·∫≠p ph√¢n
        st.write("**D·ªØ li·ªáu ƒë·∫ßu v√†o:**")
        styled_df = df.style.format({col: "{:.2f}" for col in numeric_cols})
        st.dataframe(styled_df)

        num_clusters = st.number_input("üî¢ S·ªë l∆∞·ª£ng c·ª•m (k):", min_value=2, max_value=len(df)-1, value=2, step=1)

        if st.button("üöÄ Ch·∫°y K-Means"):
            if num_clusters >= len(df):
                st.error("‚ö†Ô∏è S·ªë c·ª•m ph·∫£i nh·ªè h∆°n s·ªë l∆∞·ª£ng m·∫´u trong d·ªØ li·ªáu.")
                return

            try:
                with st.spinner("ƒêang th·ª±c hi·ªán ph√¢n c·ª•m..."):
                    clusterer = KMeansClusterer(df[numeric_cols], num_clusters, max_iterations=100)
                    labels, centroids = clusterer.cluster()
                    
                    if len(labels) != len(df):
                        raise ValueError(f"ƒê·ªô d√†i nh√£n ({len(labels)}) kh√¥ng kh·ªõp v·ªõi s·ªë h√†ng d·ªØ li·ªáu ({len(df)}).")

                    df['Cluster'] = labels

                st.markdown("### K·∫øt qu·∫£ thu·∫≠t to√°n K-means")

                st.markdown("**Tr·ªçng t√¢m:**")
                for i, centroid in enumerate(centroids):
                    centroid_rounded = [round(x, 2) for x in centroid]
                    st.markdown(f"Tr·ªçng t√¢m {i + 1}: [{', '.join(map(str, centroid_rounded))}]")

                for cluster_id in range(num_clusters):
                    cluster_data = df[labels == cluster_id][numeric_cols].reset_index(drop=True)
                    st.markdown(f"**Cum {cluster_id + 1} (k√≠ch th∆∞·ªõc: {len(cluster_data)}):**")
                    # ƒê·ªãnh d·∫°ng hi·ªÉn th·ªã cho b·∫£ng c·ª•m
                    styled_cluster = cluster_data.style.format({col: "{:.1f}" for col in numeric_cols})
                    st.table(styled_cluster)

            except Exception as e:
                st.error(f"‚ö†Ô∏è L·ªói khi ch·∫°y K-Means: {str(e)}")
                return

# ---Trang Decision Tree---          
def show_decision_tree():
    st.button("‚¨ÖÔ∏è Quay l·∫°i menu", on_click=lambda: st.session_state.update(page='home'))
    st.header("üå≥ C√¢y quy·∫øt ƒë·ªãnh")

    # T·∫£i file CSV
    uploaded_file = st.file_uploader("üìÇ T·∫£i file CSV", type=["csv"], key="decision_tree_upload")

    if uploaded_file:
        # ƒê·ªçc d·ªØ li·ªáu
        df = pd.read_csv(uploaded_file)
        st.dataframe(df)

        # Ch·ªçn c·ªôt m·ª•c ti√™u v√† c√°c c·ªôt ƒë·∫∑c tr∆∞ng
        target_column = st.selectbox("üéØ Ch·ªçn c·ªôt m·ª•c ti√™u:", df.columns)
        feature_columns = [col for col in df.columns if col != target_column]

        # L·∫•y d·ªØ li·ªáu X (ƒë·∫∑c tr∆∞ng) v√† y (nh√£n)
        X = df[feature_columns].values
        y = df[target_column].values

        # Ch·ªçn ti√™u ch√≠ ph√¢n chia
        criterion = st.radio("‚öôÔ∏è Ch·ªçn ti√™u ch√≠ ph√¢n chia:", ["Gini", "Entropy"])

        # N√∫t ƒë·ªÉ b·∫Øt ƒë·∫ßu x√¢y d·ª±ng c√¢y quy·∫øt ƒë·ªãnh
        if st.button("üöÄ Hi·ªÉn th·ªã c√¢y quy·∫øt ƒë·ªãnh"):
            # S·ª≠ d·ª•ng class DecisionTree
            tree_model = DecisionTree(criterion=criterion.lower())
            tree_model.fit(X, y)

            # Chuy·ªÉn ƒë·ªïi c√¢y quy·∫øt ƒë·ªãnh th√†nh d·∫°ng vƒÉn b·∫£n (th·ªß c√¥ng)
            tree_text = tree_model.export_text_tree_manual(feature_names=feature_columns)

            # Hi·ªÉn th·ªã c√¢y quy·∫øt ƒë·ªãnh d·∫°ng vƒÉn b·∫£n
            st.subheader("üîç C√¢y quy·∫øt ƒë·ªãnh d·∫°ng vƒÉn b·∫£n:")
            st.code(tree_text, language="text")

#---Trang kohonen---
def show_kohonen():
    st.button("‚¨ÖÔ∏è Quay l·∫°i menu", on_click=lambda: st.session_state.update(page='home'))
    st.header("üó∫Ô∏è Kohonen SOM - Ph√¢n c·ª•m")

    st.markdown("**H∆∞·ªõng d·∫´n**: T·∫£i file CSV ch·ª©a c√°c c·ªôt s·ªë ƒë·ªÉ th·ª±c hi·ªán ph√¢n c·ª•m. ƒê·∫£m b·∫£o d·ªØ li·ªáu kh√¥ng ch·ª©a gi√° tr·ªã thi·∫øu.")

    uploaded_file = st.file_uploader("T·∫£i l√™n t·ªáp CSV", type=["csv"])

    if uploaded_file:
        df = pd.read_csv(uploaded_file)

        if df.isna().any().any():
            st.error("‚ö†Ô∏è D·ªØ li·ªáu ch·ª©a gi√° tr·ªã thi·∫øu. Vui l√≤ng l√†m s·∫°ch d·ªØ li·ªáu tr∆∞·ªõc khi ch·∫°y Kohonen SOM.")
            return

        numeric_cols = df.select_dtypes(include=['float64', 'int64']).columns
        if len(numeric_cols) < 2:
            st.error("‚ö†Ô∏è D·ªØ li·ªáu ph·∫£i c√≥ √≠t nh·∫•t 2 c·ªôt s·ªë ƒë·ªÉ th·ª±c hi·ªán ph√¢n c·ª•m.")
            return

        df[numeric_cols] = df[numeric_cols].round(2)

        st.subheader("üìã Xem tr∆∞·ªõc d·ªØ li·ªáu")
        st.dataframe(df)

        selected_columns = st.multiselect(
            "Ch·ªçn c√°c c·ªôt ƒë·ªÉ ph√¢n c·ª•m (S·ªë chi·ªÅu):",
            options=list(numeric_cols),
            default=list(numeric_cols[:3])
        )

        if not selected_columns:
            st.warning("‚ö†Ô∏è Vui l√≤ng ch·ªçn √≠t nh·∫•t m·ªôt c·ªôt ƒë·ªÉ ph√¢n c·ª•m.")
            return

        # C√°c th√¥ng s·ªë m√¥ h√¨nh
        so_cum = st.number_input("S·ªë C·ª•m", min_value=1, value=3, step=1)
        so_lap = st.number_input("S·ªë L·∫ßn L·∫∑p", min_value=1, value=5, step=1)
        ban_kinh_vong_lan_can = st.number_input("B√°n K√≠nh V√πng L√¢n C·∫≠n", min_value=0.0, value=0.0, step=0.1)
        toc_do_hoc = st.number_input("T·ªëc ƒê·ªô H·ªçc", min_value=0.01, max_value=1.0, value=0.4, step=0.01)
        phuong_thuc_khoi_tao = st.selectbox("Ph∆∞∆°ng th·ª©c kh·ªüi t·∫°o tr·ªçng s·ªë:", options=["random", "manual"])

        manual_weights = None
        if phuong_thuc_khoi_tao == "manual":
            st.markdown("**Nh·∫≠p tr·ªçng s·ªë th·ªß c√¥ng cho t·ª´ng c·ª•m (d·∫°ng: x, y, z):**")

            num_clusters = so_cum
            num_dimensions = len(selected_columns)

            manual_weights = []
            for cluster_idx in range(num_clusters):
                weight_str = st.text_input(
                    f"Tr·ªçng s·ªë cho c·ª•m {cluster_idx+1} (d·∫°ng: x, y, z):", 
                    key=f"manual_weight_line_{cluster_idx}", 
                    value=", ".join(["0.0"]*num_dimensions)
                )
                try:
                    cluster_weights = [float(x.strip()) for x in weight_str.split(",")]
                    if len(cluster_weights) != num_dimensions:
                        st.error(f"S·ªë chi·ªÅu nh·∫≠p v√†o cho c·ª•m {cluster_idx+1} ph·∫£i ƒë√∫ng b·∫±ng {num_dimensions}.")
                        return
                    manual_weights.append(cluster_weights)
                except ValueError:
                    st.error(f"Tr·ªçng s·ªë cho c·ª•m {cluster_idx+1} ph·∫£i l√† c√°c s·ªë, ngƒÉn c√°ch b·∫±ng d·∫•u ph·∫©y.")
                    return

        # N√∫t ch·∫°y thu·∫≠t to√°n
        if st.button("Ch·∫°y Thu·∫≠t To√°n"):
            try:
                with st.spinner("ƒêang th·ª±c hi·ªán ph√¢n c·ª•m..."):
                    clusterer = KohonenSOM(
                        df[selected_columns].values,
                        num_clusters=so_cum,
                        learning_rate=toc_do_hoc,
                        max_iterations=so_lap,
                        neighborhood_radius=ban_kinh_vong_lan_can,
                        init_method=phuong_thuc_khoi_tao,
                        manual_weights=manual_weights
                    )
                    labels, weights = clusterer.cluster()

                    df['Cluster'] = labels

                st.markdown("### üîç K·∫øt qu·∫£ ph√¢n c·ª•m Kohonen SOM")
                # Tr·ªçng t√¢m
                st.markdown("**üéØ Tr·ªçng t√¢m (node SOM):**")
                for idx, node_weights in enumerate(weights):
                    st.markdown(f"Node {idx + 1}: [{', '.join(map(lambda x: f'{x:.2f}', node_weights))}]")

                # D·ªØ li·ªáu c·ª•m
                cluster_ids = sorted(set(labels))
                for cluster_id in cluster_ids:
                    columns_to_show = ["Tranh"] + selected_columns if "Tranh" in df.columns else selected_columns
                    cluster_data = df[df['Cluster'] == cluster_id][columns_to_show]
                    if "Tranh" in cluster_data.columns:
                        cluster_data = cluster_data.set_index("Tranh")
                    st.markdown(f"**C·ª•m {cluster_id + 1} (s·ªë l∆∞·ª£ng: {len(cluster_data)}):**")
                    st.dataframe(cluster_data)

                if len(selected_columns) >= 2:
                    x_col = selected_columns[0]
                    y_col = selected_columns[1]
                    fig, ax = plt.subplots(figsize=(6, 6))
                    scatter = ax.scatter(
                        df[x_col], df[y_col],
                        c=df['Cluster'],
                        cmap='viridis',
                        s=100
                    )
                    ax.set_xlabel(x_col)
                    ax.set_ylabel(y_col)
                    ax.set_title("Ph√¢n B·ªë C√°c C·ª•m")
                    plt.colorbar(scatter, ax=ax)
                    st.markdown("**Bi·ªÉu ƒê·ªì Ph√¢n C·ª•m:**")
                    st.pyplot(fig)

            except Exception as e:
                st.error(f"‚ùå L·ªói khi ch·∫°y Kohonen SOM: {str(e)}")

# --- Hi·ªÉn th·ªã trang t∆∞∆°ng ·ª©ng ---
if st.session_state.page == 'home':
    show_home()
elif st.session_state.page == 'apriori':
    show_apriori()
elif st.session_state.page == 'bayes':
    show_bayes()
elif st.session_state.page == 'rough':
    show_rough_set()
elif st.session_state.page == 'kmeans':
    show_kmeans()
elif st.session_state.page == 'decision_tree':
    show_decision_tree()
elif st.session_state.page == 'kohonen':
    show_kohonen()